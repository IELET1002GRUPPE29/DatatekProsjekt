//Skrevet av Elias Olsen Almenningen 

//BLYNK
#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>

//WIDGETS
WidgetTerminal terminal(V1);
WidgetLED alarmLed (V20);

//LIBRARIES
#include <ESP32Servo.h>
#include <analogWrite.h>

//SERVO
Servo myservo;


//WiFi and Auth token
char auth[] = "ytmzJE1PS9tqaITeeakoHxAfq39z0482";
char ssid[] = "ELIAS-XPS 8798";
char pass[] = "esp-32-web";

//GPIO PINS
const int servo_gpio = 33;
const int trig_gpio = 4;
const int echo_gpio = 5;
const int photoresistor_gpio = 32;
const int thermistor_gpio = 35;
const int buzzer_gpio = 21;
const int led_gpio = 23;


//CALCULATING VARIABLES
float maxTemp = 0;               //Setter maks-verdiene til 0 slik at vi vil få høyere verdier inn og overskriver
float maxLight = 0;
float maxDist = 0;

int measureSensor;                                      //Indicates wich sensor to send data from

const int temp_threshold = 25;                          //Max value before triggering alarmcounter
const int dist_threshold = 25;                          //Max value before triggering alarmcounter
const int light_threshold = 1500;                       //Max value before triggering alarmcounter
int threshold_breaker_counter = 0;                      //Number of times maxvalues have been broken

bool calculate_average_variable = false;                //Is true when data arrays are full
int readIndex = 0;                                      //Index for filling arrays
int PointsPerAverage = 10;                              //Starting lengt of each avg point
int ppaSlider;                                          //Value from ppa slider on the blynk app

const int basicArrayLength = 50;                        //the length of each data array
float tempArray[basicArrayLength];                      //Array thath holds 50 elemtns
float distanceArray[basicArrayLength];                  //Array thath holds 50 elemtns
float lightArray[basicArrayLength];                     //Array thath holds 50 elemtns

bool servo_left = false;                                //Boolean value that determines whitch position the servo ends up in

long duration;                                          //HC-SR04 variable
int distance;                                           //HC-SR04 variable

const int room_temp = 22;                               //Room temperature in degrees
int R1 = 10000;                                         //the resistor from voltage divider
float Bt = 3950.0;                                      //constant value

float sensor_value;                                     //Get analog values from sensors

int total;                                              //Used to calculate the avg

//TIMER VARIABLES
unsigned long time_now;                                 //For sending avg values to blynk
unsigned long prev_time;                                //For sending avg values to blynk
const int time_threshold = 10000;                       //Dimedelta for sending avg values to blynk
unsigned long alarmtime;                                //For millis timer in servo_alarm
unsigned long inside_time_now;                          //For millis timer in alarm()
unsigned long servo_test_time;                          //For millis timer in test servo
int terskel = 100;                                       //Wait time for millis delay

//Functions
float thermistor() {
  sensor_value = analogRead(thermistor_gpio);                   //reading the value from GPIO35
  float Vout = sensor_value * (3.3 / 4095.0);                   //converts from analog to voltage
  float Rt = R1 * Vout / (3.3 - Vout);                          //the resistance of thermistor from the voltage divider
  float a1 = 1 / (270.15 + room_temp);
  float b1 = 1 / Bt;
  float c1 = log(Rt / 10000.0);                                 //third parameter, 10000 ohms are Ro at zero degrees celsius
  float y1 = a1 + b1 * c1;                                      //the result of equation
  float T = 1 / y1;                                             //temperature in kelvin
  float Tc = T - 273.15;                                        //temperature in celsius
  return Tc;
}

float distance_func() {                                 //Found at: https://www.instructables.com/id/Pocket-Size-Ultrasonic-Measuring-Tool-With-ESP32/

  // Clears the trigPin
  digitalWrite(trig_gpio, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trig_gpio, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig_gpio, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echo_gpio, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2;
  // Prints the distance on the Serial Monitor

  return distance;
}

float photo() {
  sensor_value = analogRead(photoresistor_gpio);            //Reads and returns the value form the photoresistor
  return sensor_value;
}

//Calculates average value from data arrays
float averageArray(float * array, int sliderValue) {                        //got from Michael Berg
  total = 0;
  for (int i = 0; i < sliderValue; i++)
  {
    total += float(array[i]);
  }

  return (float(total) / float(sliderValue));
}

//Function that checks max and min values
void max_min(float temp, float light, float dist) { //By Michael Berg
  if (temp > maxTemp) {
    maxTemp = temp;
  }
  if (light > maxLight) {
    maxLight = light;
  }
  if (dist > maxDist) {
    maxDist = dist;
  }
}

void alarm() {
  analogWrite(buzzer_gpio, 100);                                //Buzzer beep
  analogWrite(led_gpio, HIGH);                                 //Led on
  alarmLed.on();                                                //Blynk led widget on
  alarmtime = millis();
  while (millis() < alarmtime + terskel) {
    servo_alarm(); //sweep servo
  }
  analogWrite(buzzer_gpio, 0);                                  //Buzzer no buzz
  analogWrite(led_gpio, LOW);                                  //Led off
  alarmLed.off();                                               //Blynk led widget off
  alarmtime = millis();
  while (millis() < alarmtime + terskel) {}               //Wait 100ms
}

void servo_alarm() {
  alarmtime = millis();
  while (millis() < alarmtime + 500) {                  //Wait 500 ms
    for (int pos = 0; pos <= 180; pos += 1) {           //Sweep servo from 0 t0 180 degrees
      myservo.write(pos);
      time_now = millis();
      while (millis() < time_now + 10) {}               //Wait 10 ms for servo to move
    }
    for (int pos = 180; pos >= 0; pos -= 1) {           //Sweeps from 180 to 0 degrees
      myservo.write(pos);
      time_now = millis();
      while (millis() < time_now + 10) {}
    }
  }
  if (servo_left == true) {                             //If servo stopped on left side, stop on right side
    myservo.write(180);
  }
  if (servo_left == false) {                            //If servo stopped on right side, stop on left side
    myservo.write(0);
  }
  servo_left = !servo_left;                             //Switch last servo state
}

BLYNK_WRITE(V0) {
  switch (param.asInt()) {
    case 1: {                                                   //If sensor 1 is activated from blynk
        terminal.clear();                                       //"Turn on" sensor
        measureSensor = 1;                                      //Name the graphs mm.
        Blynk.setProperty(V2, "label", "Distance");
        Blynk.setProperty(V2, "suffix", "Distance");
        Blynk.setProperty(V2, "min", 0);
        Blynk.setProperty(V2, "max", 200);
        Blynk.setProperty(V2, "/pin/", "cm");
        break;
      }
    case 2: {
        terminal.clear();
        measureSensor = 2;
        Blynk.setProperty(V2, "label", "Temperature");
        Blynk.setProperty(V2, "suffix", "Temp");
        Blynk.setProperty(V2, "min", 0);
        Blynk.setProperty(V2, "max", 30);
        Blynk.setProperty(V2, "/pin/", "C");
        break;
      }
    case 3: {
        terminal.clear();
        measureSensor = 3;
        Blynk.setProperty(V2, "label", "Light");
        Blynk.setProperty(V2, "suffix", "Volt");
        Blynk.setProperty(V2, "min", 0);
        Blynk.setProperty(V2, "max", 4095);
        Blynk.setProperty(V2, "/pin/", "V");
        break;
      }
  }
}

BLYNK_WRITE(V3) {                                       //Get ppa number from slide widget
  PointsPerAverage = param.asInt();
  calculate_average_variable = false;                   //dont take effect untill data array is full
}


BlynkTimer timer;

void myTimerEvent()
{
  if (measureSensor == 1) {                                                         //Sensor 1 is active
    Blynk.virtualWrite(V2, distance_func());                                        //Send data to live graph
    String printstring = "The distance is: " + String(distance_func()) + "cm\n";    //send data to terminal
    terminal.print(printstring);
    if (calculate_average_variable == true) {                                       //WHen array is full, send data to avg
      Blynk.virtualWrite(V4, averageArray(distanceArray, PointsPerAverage));
      Blynk.virtualWrite(V7, averageArray(distanceArray, PointsPerAverage));
    }
  }
  if (measureSensor == 2) {
    Blynk.virtualWrite(V2, thermistor());
    String printstring = "The temp is: " + String(thermistor()) + "C\n";
    terminal.print(printstring);
    if (calculate_average_variable == true) {
      Blynk.virtualWrite(V5, averageArray(tempArray, PointsPerAverage));
      Blynk.virtualWrite(V7, averageArray(tempArray, PointsPerAverage));
    }
  }
  if (measureSensor == 3) {
    Blynk.virtualWrite(V2, photo());
    String printstring = "The light is: " + String(photo()) + "V\n";
    terminal.print(printstring);
    if (calculate_average_variable == true) {
      Blynk.virtualWrite(V6, averageArray(lightArray, PointsPerAverage));
      Blynk.virtualWrite(V7, averageArray(lightArray, PointsPerAverage));
    }
  }

  tempArray[readIndex] = thermistor();
  distanceArray[readIndex] = distance_func();
  lightArray[readIndex] = photo();
  max_min(thermistor(), photo(), distance_func());

  readIndex = readIndex + 1;                          // går til neste posisjon i arrayet
  if (readIndex >= basicArrayLength) {
    readIndex = 0;
    calculate_average_variable = true;                //regner ut snitt først når hele arrayet er fullt
  }


}

void setup()
{
  Serial.begin(9600);
  myservo.attach(33);
  pinMode(trig_gpio, OUTPUT);                                             // Sets the trigPin as an Output
  pinMode(echo_gpio, INPUT);                                              // Sets the echoPin as an Input
  Blynk.begin(auth, ssid, pass, IPAddress(91, 192, 221, 40), 8080);
  timer.setInterval(100L, myTimerEvent);
}

void loop()
{
  Blynk.run();
  timer.run(); // Initiates BlynkTimer
  time_now = millis();

  if (time_now > prev_time + time_threshold) {                             //triggers if the max value wait time is surpassed
    Blynk.virtualWrite(V12, maxDist);                                       //prints the values
    Blynk.virtualWrite(V14, maxTemp);
    Blynk.virtualWrite(V16, maxLight);
    prev_time = time_now;                                                 //resets timers and values
    maxTemp = 0;
    maxLight = 0;
    maxDist = 0;
  }
  if (maxDist > dist_threshold) {                                         //if the max thresholds are surpassed, add 1 to breakcointer
    threshold_breaker_counter ++;
  }
  if (maxTemp > temp_threshold) {
    threshold_breaker_counter ++;
  }
  if (maxLight > light_threshold) {
    threshold_breaker_counter ++;
  }
  if (threshold_breaker_counter >= 2) {                                 //if two maxes are surpassed, trigger alarm
    alarm();
    threshold_breaker_counter = 0;                                      //reset counter
  }
}
